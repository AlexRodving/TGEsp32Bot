#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <Preferences.h>

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
#define ONE_WIRE_BUS 4
const char* ssid = "";
const char* password = "";
#define BOT_TOKEN ""
#define MASTER_PASSWORD ""
#define BOT_MTBS 500 // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–º—Å)

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ (–ú–æ—Å–∫–≤–∞ GMT+3)
const char* ntpServer1 = "ru.pool.ntp.org";
const char* ntpServer2 = "europe.pool.ntp.org";
const long gmtOffset_sec = 10800;
const int daylightOffset_sec = 0;

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
DeviceAddress tempSensor;

WiFiClientSecure client;
UniversalTelegramBot bot(BOT_TOKEN, client);
Preferences preferences;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
bool reportEnabled = true;
int reportHour = 8;
float tempThreshold = 25.0;
const int MAX_USERS = 10;
String allowedChatIds[MAX_USERS];
int userCount = 0;
unsigned long bot_lasttime = 0;

void setup() {
  Serial.begin(115200);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
  sensors.begin();
  if (!sensors.getAddress(tempSensor, 0)) {
    Serial.println("–î–∞—Ç—á–∏–∫ DS18B20 –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!");
    while(1);
  }
  sensors.setResolution(10); // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å/—Ç–æ—á–Ω–æ—Å—Ç—å
  sensors.setWaitForConversion(false);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä–≤–µ—Ä—ã)
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer1, ntpServer2);
  
// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  WiFi.mode(WIFI_STA);
  WiFi.setSleep(false); // –û—Ç–∫–ª—é—á–∞–µ–º —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ WiFi
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  client.setTimeout(5); // –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è 5 —Å–µ–∫

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  preferences.begin("temp-station", false);
  loadSettings();
  
  connectToWiFi();
}

void loadSettings() {
  reportEnabled = preferences.getBool("reportEnabled", true);
  reportHour = preferences.getInt("reportHour", 8);
  tempThreshold = preferences.getFloat("tempThreshold", 25.0);
  userCount = preferences.getInt("userCount", 0);
  
  for(int i = 0; i < userCount; i++) {
    allowedChatIds[i] = preferences.getString(("user_" + String(i)).c_str(), "");
  }
}

void loop() {
  static unsigned long lastTempRead = 0;
  static uint8_t lastDay = 0;
  
  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫
  if (millis() - lastTempRead > 2000) {
    lastTempRead = millis();
    sensors.requestTemperatures();
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å Telegram
  if (millis() - bot_lasttime > BOT_MTBS) {
    bot_lasttime = millis();
    handleTelegramMessages();
    checkSystem(&lastDay);
  }
}

void handleTelegramMessages() {
  int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  
  while(numNewMessages) {
    for (int i=0; i<numNewMessages; i++) {
      processMessage(bot.messages[i]);
    }
    numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    yield();
  }
}

void processMessage(telegramMessage msg) {
  String chat_id = String(msg.chat_id);
  String text = msg.text;
  
  // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
  if(!isUserAllowed(chat_id) && !text.startsWith("/add_user")) {
    bot.sendMessage(chat_id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_user [–ø–∞—Ä–æ–ª—å]", "");
    return;
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  if (text.startsWith("/add_user ")) {
    handleAddUser(chat_id, text.substring(10));
  } 
  else if (text == "/status") {
    sendCurrentStatus(chat_id);
  }
  else if (text == "/report_on" || text == "/report_off") {
    handleReportToggle(chat_id, text);
  }
  else if (text.startsWith("/set_time ")) {
    handleSetTime(chat_id, text.substring(10));
  }
  else if (text.startsWith("/set_temp_threshold ")) {
    handleSetThreshold(chat_id, text.substring(19));
  }
  else if (text == "/list_users") {
    listUsers(chat_id);
  }
  else if (text == "/help") {
    sendHelp(chat_id);
  }
}

void checkSystem(uint8_t* lastDay) {
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo, 100)) { // –¢–∞–π–º–∞—É—Ç 100 –º—Å
    Serial.println("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏");
    return;
  }

  if (reportEnabled && timeinfo.tm_hour == reportHour && 
      timeinfo.tm_mday != *lastDay) {
    *lastDay = timeinfo.tm_mday;
    sendDailyReport();
  }

  checkTemperatureThreshold();
}

void handleAddUser(String chat_id, String password) {
  if(password == MASTER_PASSWORD) {
    if(addNewUser(chat_id)) {
      bot.sendMessage(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!", "");
    } else {
      bot.sendMessage(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –õ–∏–º–∏—Ç: " + String(MAX_USERS), "");
    }
  } else {
    bot.sendMessage(chat_id, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!", "");
  }
}

void sendCurrentStatus(String chat_id) {
  float t = getCurrentTemperature();
  String message = "üìä –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è:\n";
  message += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(t) + "¬∞C\n";
  message += "‚è∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: " + getRussianTimeString();
  message += "\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + String(userCount);
  bot.sendMessage(chat_id, message, "");
}

void handleReportToggle(String chat_id, String command) {
  reportEnabled = (command == "/report_on");
  preferences.putBool("reportEnabled", reportEnabled);
  bot.sendMessage(chat_id, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç " + String(reportEnabled ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"), "");
}

void handleSetTime(String chat_id, String timeStr) {
  int newHour = timeStr.toInt();
  if (newHour >= 0 && newHour < 24) {
    reportHour = newHour;
    preferences.putInt("reportHour", newHour);
    bot.sendMessage(chat_id, "‚è∞ –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ " + String(newHour) + ":00", "");
  } else {
    bot.sendMessage(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 0-23", "");
  }
}

void handleSetThreshold(String chat_id, String thresholdStr) {
  float newThreshold = thresholdStr.toFloat();
  tempThreshold = newThreshold;
  preferences.putFloat("tempThreshold", newThreshold);
  bot.sendMessage(chat_id, "üå° –ü–æ—Ä–æ–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ " + String(newThreshold) + "¬∞C", "");
}

void listUsers(String chat_id) {
  if(userCount == 0) {
    bot.sendMessage(chat_id, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç", "");
    return;
  }
  
  String userList = "üë• –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (" + String(userCount) + "):\n";
  for(int i = 0; i < userCount; i++) {
    userList += allowedChatIds[i] + "\n";
  }
  bot.sendMessage(chat_id, userList, "");
}

void sendHelp(String chat_id) {
  String help = "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n";
  help += "/add_user [–ø–∞—Ä–æ–ª—å] - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n";
  help += "/status - —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è\n";
  help += "/report_on - –≤–∫–ª—é—á–∏—Ç—å –æ—Ç—á–µ—Ç\n";
  help += "/report_off - –≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç—á–µ—Ç\n";
  help += "/set_time [—á–∞—Å] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞ (0-23)\n";
  help += "/set_temp_threshold [–∑–Ω–∞—á–µ–Ω–∏–µ] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n";
  help += "/list_users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n";
  help += "/help - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ";
  bot.sendMessage(chat_id, help, "");
}

bool isUserAllowed(String chat_id) {
  for(int i = 0; i < userCount; i++) {
    if(chat_id == allowedChatIds[i]) {
      return true;
    }
  }
  return false;
}

bool addNewUser(String chat_id) {
  if(userCount >= MAX_USERS) return false;
  if(isUserAllowed(chat_id)) return false;
  
  allowedChatIds[userCount] = chat_id;
  userCount++;
  
  preferences.putInt("userCount", userCount);
  preferences.putString(("user_" + String(userCount-1)).c_str(), chat_id);
  
  return true;
}

float getCurrentTemperature() {
  float temp = sensors.getTempC(tempSensor);
  return temp == DEVICE_DISCONNECTED_C ? NAN : temp;
}

void sendDailyReport() {
  float t = getCurrentTemperature();
  if (isnan(t)) return;
  
  String message = "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç:\n";
  message += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(t) + "¬∞C\n";
  message += "‚è∞ –í—Ä–µ–º—è: " + getRussianTimeString();
  
  for(int i = 0; i < userCount; i++) {
    bot.sendMessage(allowedChatIds[i], message, "");
  }
}

void checkTemperatureThreshold() {
  static bool tempAlertSent = false;
  float t = getCurrentTemperature();
  
  if (isnan(t)) return;
  
  if (t > tempThreshold && !tempAlertSent) {
    for(int i = 0; i < userCount; i++) {
      bot.sendMessage(allowedChatIds[i], "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–µ–≤—ã—à–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(t) + "¬∞C", "");
    }
    tempAlertSent = true;
  } else if (t <= tempThreshold) {
    tempAlertSent = false;
  }
}

String getRussianTimeString() {
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo, 100)) {
    return "–í—Ä–µ–º—è –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ";
  }
  
  char timeString[20];
  strftime(timeString, sizeof(timeString), "%d.%m.%Y %H:%M:%S", &timeinfo);
  return String(timeString);
}

void connectToWiFi() {
  WiFi.begin(ssid, password);
  Serial.print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi");
  for(int i = 0; i < 20; i++) {
    if(WiFi.status() == WL_CONNECTED) {
      Serial.println("\nWiFi –ø–æ–¥–∫–ª—é—á–µ–Ω");
      Serial.print("IP –∞–¥—Ä–µ—Å: ");
      Serial.println(WiFi.localIP());
      return;
    }
    Serial.print(".");
    delay(500);
  }
  Serial.println("\n–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WiFi");
}